// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, name, password, streamKey) VALUES (
  ?, ?, ?, ?
)
RETURNING id, name, password, streamkey
`

type CreateUserParams struct {
	ID        string
	Name      string
	Password  []byte
	Streamkey []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.Streamkey,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Streamkey,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE name = ?
`

func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, name)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, streamkey FROM users
WHERE name = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Streamkey,
	)
	return i, err
}

const getUsernameForStreamKey = `-- name: GetUsernameForStreamKey :one
SELECT name FROM users
WHERE streamKey = ?
`

func (q *Queries) GetUsernameForStreamKey(ctx context.Context, streamkey []byte) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsernameForStreamKey, streamkey)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, password, streamkey FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Streamkey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = ?,
password = ?,
streamKey = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name      string
	Password  []byte
	Streamkey []byte
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Password,
		arg.Streamkey,
		arg.ID,
	)
	return err
}
